Retr_Params_all$vars$ha_vars <- c("pet_mm_s01","cly_pc_sav")
Retr_Params_all <- Retr_Params
Retr_Params_all$vars$ha_vars <- c("pet_mm_s01","cly_pc_sav")
Retr_Params_all$vars$usgs_vars <-  c("TOT_TWI","TOT_PRSNOW","TOT_POPDENS90","TOT_EWT","TOT_RECHG","TOT_BFI")
exp_dat <- readRDS(system.file("extdata", paste0("attrs_18094081.Rds"), package="proc.attr.hydfab"))
exp_dat$attribute <- as.character(exp_dat$attribute)
dat_all <- proc.attr.hydfab::proc_attr_wrap(comid=18094081,Retr_Params_all,
lyrs='network',
overwrite=TRUE )
# How the exp_dat was originally created for unit testing
# saveRDS(dat_all,paste0("~/git/fsds/pkg/proc.attr.hydfab/inst/extdata/attrs_18094081.Rds"))
testthat::expect_true(dir.exists(dir_db_attrs))
# Remove the dl_timestamp column for download timestamp and compare
testthat::expect_equal(
exp_dat %>% select(-dl_timestamp) %>% as.matrix(),
dat_all %>% select(-dl_timestamp) %>% as.matrix())
# Test when data exist in tempdir and new data do not exist
Retr_Params_only_new <- Retr_Params
Retr_Params_only_new$vars$usgs_vars <- c('TOT_PET')
dat_add_pet <- suppressWarnings(proc.attr.hydfab::proc_attr_wrap(comid,Retr_Params_only_new,
lyrs='network',
overwrite=FALSE ))
testthat::expect_true(any('TOT_PET' %in% dat_add_pet$attribute))
testthat::expect_true(any(grepl("TOT_PRSNOW", dat_add_pet$attribute)))
dat_add_pet$attribute
# Test when data exist in tempdir and new data do not exist
Retr_Params_only_new <- Retr_Params
Retr_Params_only_new$vars$usgs_vars <- c('TOT_PET')
dat_add_pet <- suppressWarnings(proc.attr.hydfab::proc_attr_wrap(comid,Retr_Params_only_new,
lyrs='network',
overwrite=FALSE ))
#' @title A test fixture for unit testing test_proc_attr_grabber.R
#' @description Ensures that setup and teardown acode runs consistently
library(withr)
local_temp_dir <- function(env = parent.frame()) {
temp_dir <- tempdir()
withr::defer(unlink(temp_dir), env)
temp_dir
}
local_temp_dir()
source("~/git/fsds/pkg/proc.attr.hydfab/flow/flow.install.proc.attr.hydfab.R", echo=TRUE)
Retr_Params$paths$dir_db_attrs
Retr_Params$paths$dir_hydfab
Retr_Params$paths$dir_db_attrs %>%
base::gsub(x=temp_dir,replacement =local_temp_dir() )
temp_dir
Retr_Params$paths$dir_db_attrs
Retr_Params$paths$dir_db_attrs
temp_dir
Retr_Params$paths$dir_db_attrs %>%
base::gsub(x=temp_dir,replacement=local_temp_dir() )
Retr_Params$paths$dir_db_attrs %>%
base::gsub(pattern=temp_dir,replacement=local_temp_dir() )
Retr_Params$paths$dir_db_attrs %>%
base::gsub(pattern=temp_dir,
replacement=local_temp_dir() )
Retr_Params$paths$dir_hydfab %>%
base::gsub(pattern=temp_dir,
replacement =local_temp_dir() )
Retr_Params$paths$dir_hydfab
source("~/git/fsds/pkg/proc.attr.hydfab/flow/flow.install.proc.attr.hydfab.R", echo=TRUE)
tempdir()
tempdir()
tempdir()
list.files(tempdir)
list.files(tempdir())
list.files(paste0(tempdir(),"attr")
)
list.files(paste0(tempdir(),"/attr"))
list.dirs(tempdir())
list.dirs(paste0(tempdir(),"/attrs"))
list.dirs(paste0(tempdir(),"/hfab"))
list.dirs(paste0(tempdir(),"/newone"))
Retr_Params_all <- Retr_Params
# Substitute w/ new tempdir based on setup.R
Retr_Params$paths$dir_db_attrs <- Retr_Params$paths$dir_db_attrs %>%
base::gsub(pattern=temp_dir,
replacement=local_temp_dir() )
Retr_Params$paths$dir_hydfab <- Retr_Params$paths$dir_hydfab %>%
base::gsub(pattern=temp_dir,
replacement =local_temp_dir() )
Retr_Params_all$vars$ha_vars <- c("pet_mm_s01","cly_pc_sav")
Retr_Params_all$vars$usgs_vars <-  c("TOT_TWI","TOT_PRSNOW","TOT_POPDENS90","TOT_EWT","TOT_RECHG","TOT_BFI")
exp_dat <- readRDS(system.file("extdata", paste0("attrs_18094081.Rds"), package="proc.attr.hydfab"))
exp_dat$attribute <- as.character(exp_dat$attribute)
dat_all <- proc.attr.hydfab::proc_attr_wrap(comid=18094081,Retr_Params_all,
lyrs='network',
overwrite=TRUE )
# How the exp_dat was originally created for unit testing
# saveRDS(dat_all,paste0("~/git/fsds/pkg/proc.attr.hydfab/inst/extdata/attrs_18094081.Rds"))
testthat::expect_true(dir.exists(dir_db_attrs))
# Remove the dl_timestamp column for download timestamp and compare
testthat::expect_equal(
exp_dat %>% select(-dl_timestamp) %>% as.matrix(),
dat_all %>% select(-dl_timestamp) %>% as.matrix())
# Test when data exist in tempdir and new data do not exist
Retr_Params_only_new <- Retr_Params
Retr_Params_only_new$vars$usgs_vars <- c('TOT_PET')
Retr_Params_only_new
dat_all$attribute
dat_add_pet <- suppressWarnings(proc.attr.hydfab::proc_attr_wrap(comid,Retr_Params_only_new,
lyrs='network',
overwrite=FALSE ))
testthat::expect_true(any('TOT_PET' %in% dat_add_pet$attribute))
testthat::expect_true(any(grepl("TOT_PRSNOW", dat_add_pet$attribute)))
dat_add_pet$attribute
source("~/git/fsds/pkg/proc.attr.hydfab/flow/flow.install.proc.attr.hydfab.R", echo=TRUE)
list.files(Retr_Params$paths$dir_db_attrs)
file.path(Retr_Params$paths$dir_db_attrs,list.files(Retr_Params$paths$dir_db_attrs))
file.remove(files_attrs)
files_attrs <- file.path(Retr_Params$paths$dir_db_attrs,list.files(Retr_Params$paths$dir_db_attrs))
file.remove(files_attrs)
list.files(Retr_Params$paths$dir_db_attrs)
source("~/git/fsds/pkg/proc.attr.hydfab/flow/flow.install.proc.attr.hydfab.R", echo=TRUE)
source("~/git/fsds/pkg/proc.attr.hydfab/flow/flow.install.proc.attr.hydfab.R", echo=TRUE)
library(withr)
local_temp_dir <- function(env = parent.frame()) {
temp_dir <- tempdir()
withr::defer(unlink(temp_dir), env)
temp_dir
}
local_temp_dir2 <- function(env = parent.frame()) {
temp_dir <- tempdir()
withr::defer(unlink(temp_dir), env)
temp_dir
}
suppressPackageStartupMessages(library(proc.attr.hydfab,quietly=TRUE))
suppressPackageStartupMessages(library(testthat,quietly=TRUE))
suppressPackageStartupMessages(library(dplyr,quietly=TRUE))
suppressPackageStartupMessages(library(arrow,quietly=TRUE))
suppressPackageStartupMessages(library(hydrofabric,quietly=TRUE))
suppressPackageStartupMessages(library(data.table,quietly=TRUE))
# TODO establish a basic config file to read in for this functionality
comid <- "18094981"#"02479560"#14138870# A small basin
s3_base <- "s3://lynker-spatial/tabular-resources"
s3_bucket <- 'lynker-spatial'
s3_path_hydatl <- glue::glue('{s3_base}/hydroATLAS/hydroatlas_vars.parquet')
# Testing variables
ha_vars <- c('pet_mm_s01', 'cly_pc_sav', 'cly_pc_uav') # hydroatlas variables
usgs_vars <- c('TOT_TWI','TOT_PRSNOW','TOT_POPDENS90','TOT_EWT','TOT_RECHG')
# Define data directories to a package-specific data path
dir_base <- system.file("extdata",package="proc.attr.hydfab")
# Refer to temp_dir <- tempdir() in setup.R
temp_dir <- local_temp_dir()
dir_hydfab <- file.path(temp_dir,'hfab')
dir_db_attrs <- file.path(temp_dir,'attrs') # used for temporary attr retrieval
dir_db_attrs_pkg <- system.file("extdata","attributes_pah",package="proc.attr.hydfab")# permanent pacakage location
dir_user <- system.file("extdata","user_data_std", package="proc.attr.hydfab") # dir_user <- "~/git/fsds/pkg/proc.attr.hydfab/inst/extdata/user_data_std/"
dir_dataset <- file.path(dir_user,'xssa-mini')
path_mini_ds <- file.path(dir_dataset,'xSSA-mini_Raven_blended.nc')
ls_fsds_std <- proc.attr.hydfab::proc_attr_read_gage_ids_fsds(dir_dataset)
ha_vars <- c('pet_mm_s01', 'cly_pc_sav')#, 'cly_pc_uav') # hydroatlas variables
sc_vars <- c() # TODO look up variables. May need to select datasets first
usgs_vars <- c('TOT_TWI','TOT_PRSNOW')#,'TOT_POPDENS90','TOT_EWT','TOT_RECHG')
Retr_Params <- list(paths = list(dir_hydfab=dir_hydfab,
dir_db_attrs=dir_db_attrs,
s3_path_hydatl = s3_path_hydatl),
vars = list(usgs_vars = usgs_vars,
ha_vars = ha_vars),
dataset = 'xssa-mini')
# ---------------------------------------------------------------------------- #
#                              UNIT TESTING
# ---------------------------------------------------------------------------- #
testthat::test_that("proc_attr_std_hfsub_name standardized name generator", {
testthat::expect_equal('hydrofab_testit_111.parquet',
proc.attr.hydfab:::proc_attr_std_hfsub_name(111,"testit",'parquet'))
})
testthat::test_that('proc_attr_gageids',{
# test just usgs vars
Retr_Params_usgs <- Retr_Params_ha <- Retr_Params
Retr_Params_usgs$vars <- list(usgs_vars = usgs_vars)
ls_comids <- proc.attr.hydfab::proc_attr_gageids(gage_ids=ls_fsds_std$gage_ids[2],
featureSource=ls_fsds_std$featureSource,
featureID=ls_fsds_std$featureID,
Retr_Params=Retr_Params_usgs,
lyrs="network",overwrite=FALSE)
testthat::expect_identical(names(ls_comids),ls_fsds_std$gage_ids[2])
testthat::expect_identical(class(ls_comids),"list")
# test just hydroatlas var
Retr_Params_ha$vars <- list(ha_vars = ha_vars)
ls_comids_ha <- proc.attr.hydfab::proc_attr_gageids(gage_ids=ls_fsds_std$gage_ids[2],
featureSource=ls_fsds_std$featureSource,
featureID=ls_fsds_std$featureID,
Retr_Params=Retr_Params_ha,
lyrs="network",overwrite=FALSE)
})
testthat::test_that('retrieve_attr_exst', {
comids <- c("1520007","1623207","1638559","1722317") # !!Don't change this!!
vars <- Retr_Params$vars %>% unlist() %>% unname()
# Run tests based on expected dims
dat_attr_all <- proc.attr.hydfab::retrieve_attr_exst(comids,vars,dir_db_attrs_pkg)
testthat::expect_equal(length(unique(dat_attr_all$COMID)),
length(comids))
testthat::expect_equal(length(unique(dat_attr_all$attribute)),length(vars))
testthat::expect_error(proc.attr.hydfab::retrieve_attr_exst(comids,
vars,
dir_db_attrs='a'))
# Testing for No parquet files present
capt_no_parquet <- testthat::capture_condition(proc.attr.hydfab::retrieve_attr_exst(comids,
vars,
dir_db_attrs=dirname(dir_db_attrs_pkg)))
testthat::expect_true(grepl("parquet",capt_no_parquet$message))
nada_var <- testthat::capture_warning(proc.attr.hydfab::retrieve_attr_exst(comids,vars=c("TOT_TWI","naDa"),
dir_db_attrs_pkg))
testthat::expect_true(grepl("naDa",nada_var$message))
nada_comid <- testthat::capture_condition(proc.attr.hydfab::retrieve_attr_exst(comids=c("1520007","1623207","nada"),vars,
dir_db_attrs_pkg))
testthat::expect_true(base::grepl("nada",nada_comid$message))
testthat::expect_error(proc.attr.hydfab::retrieve_attr_exst(comids,vars=c(3134,3135),
dir_db_attrs_pkg))
testthat::expect_warning(proc.attr.hydfab::retrieve_attr_exst(comids=c(3134,3135),vars,
dir_db_attrs_pkg))
})
Retr_Params_all <- Retr_Params
# Substitute w/ new tempdir based on setup.R
Retr_Params$paths$dir_db_attrs <- Retr_Params$paths$dir_db_attrs %>%
base::gsub(pattern=temp_dir,
replacement=local_temp_dir2() )
Retr_Params$paths$dir_hydfab <- Retr_Params$paths$dir_hydfab %>%
base::gsub(pattern=temp_dir,
replacement =local_temp_dir2() )
Retr_Params_all$vars$ha_vars <- c("pet_mm_s01","cly_pc_sav")
Retr_Params_all$vars$usgs_vars <-  c("TOT_TWI","TOT_PRSNOW","TOT_POPDENS90","TOT_EWT","TOT_RECHG","TOT_BFI")
exp_dat <- readRDS(system.file("extdata", paste0("attrs_18094081.Rds"), package="proc.attr.hydfab"))
exp_dat$attribute <- as.character(exp_dat$attribute)
dat_all <- proc.attr.hydfab::proc_attr_wrap(comid=18094081,Retr_Params_all,
lyrs='network',
overwrite=TRUE )
testthat::expect_true(dir.exists(dir_db_attrs))
# Remove the dl_timestamp column for download timestamp and compare
testthat::expect_equal(
exp_dat %>% select(-dl_timestamp) %>% as.matrix(),
dat_all %>% select(-dl_timestamp) %>% as.matrix())
# Test when data exist in tempdir and new data do not exist
Retr_Params_only_new <- Retr_Params
Retr_Params_only_new$vars$usgs_vars <- c('TOT_PET')
dat_add_pet <- suppressWarnings(proc.attr.hydfab::proc_attr_wrap(comid,Retr_Params_only_new,
lyrs='network',
overwrite=FALSE ))
dat_add_pet <- suppressWarnings(proc.attr.hydfab::proc_attr_wrap(18094081,Retr_Params_only_new,
lyrs='network',
overwrite=FALSE ))
testthat::expect_true(any('TOT_PET' %in% dat_add_pet$attribute))
testthat::expect_true(any(grepl("TOT_PRSNOW", dat_add_pet$attribute)))
source("~/git/fsds/pkg/proc.attr.hydfab/flow/flow.install.proc.attr.hydfab.R", echo=TRUE)
# unloadNamespace("proc.attr.hydfab")
suppressPackageStartupMessages(library(proc.attr.hydfab,quietly=TRUE))
suppressPackageStartupMessages(library(testthat,quietly=TRUE))
suppressPackageStartupMessages(library(dplyr,quietly=TRUE))
suppressPackageStartupMessages(library(arrow,quietly=TRUE))
suppressPackageStartupMessages(library(hydrofabric,quietly=TRUE))
suppressPackageStartupMessages(library(data.table,quietly=TRUE))
# TODO establish a basic config file to read in for this functionality
comid <- "18094981"#"02479560"#14138870# A small basin
s3_base <- "s3://lynker-spatial/tabular-resources"
s3_bucket <- 'lynker-spatial'
s3_path_hydatl <- glue::glue('{s3_base}/hydroATLAS/hydroatlas_vars.parquet')
# Testing variables
ha_vars <- c('pet_mm_s01', 'cly_pc_sav', 'cly_pc_uav') # hydroatlas variables
usgs_vars <- c('TOT_TWI','TOT_PRSNOW','TOT_POPDENS90','TOT_EWT','TOT_RECHG')
# Define data directories to a package-specific data path
dir_base <- system.file("extdata",package="proc.attr.hydfab")
# Refer to temp_dir <- tempdir() in setup.R
temp_dir <- local_temp_dir()
source("~/git/fsds/pkg/proc.attr.hydfab/tests/testthat/setup.R", echo=TRUE)
# unloadNamespace("proc.attr.hydfab")
suppressPackageStartupMessages(library(proc.attr.hydfab,quietly=TRUE))
suppressPackageStartupMessages(library(testthat,quietly=TRUE))
suppressPackageStartupMessages(library(dplyr,quietly=TRUE))
suppressPackageStartupMessages(library(arrow,quietly=TRUE))
suppressPackageStartupMessages(library(hydrofabric,quietly=TRUE))
suppressPackageStartupMessages(library(data.table,quietly=TRUE))
# TODO establish a basic config file to read in for this functionality
comid <- "18094981"#"02479560"#14138870# A small basin
s3_base <- "s3://lynker-spatial/tabular-resources"
s3_bucket <- 'lynker-spatial'
s3_path_hydatl <- glue::glue('{s3_base}/hydroATLAS/hydroatlas_vars.parquet')
# Testing variables
ha_vars <- c('pet_mm_s01', 'cly_pc_sav', 'cly_pc_uav') # hydroatlas variables
usgs_vars <- c('TOT_TWI','TOT_PRSNOW','TOT_POPDENS90','TOT_EWT','TOT_RECHG')
# Define data directories to a package-specific data path
dir_base <- system.file("extdata",package="proc.attr.hydfab")
# Refer to temp_dir <- tempdir() in setup.R
temp_dir <- local_temp_dir()
dir_hydfab <- file.path(temp_dir,'hfab')
dir_db_attrs <- file.path(temp_dir,'attrs') # used for temporary attr retrieval
dir_db_attrs_pkg <- system.file("extdata","attributes_pah",package="proc.attr.hydfab")# permanent pacakage location
dir_user <- system.file("extdata","user_data_std", package="proc.attr.hydfab") # dir_user <- "~/git/fsds/pkg/proc.attr.hydfab/inst/extdata/user_data_std/"
dir_dataset <- file.path(dir_user,'xssa-mini')
path_mini_ds <- file.path(dir_dataset,'xSSA-mini_Raven_blended.nc')
ls_fsds_std <- proc.attr.hydfab::proc_attr_read_gage_ids_fsds(dir_dataset)
ha_vars <- c('pet_mm_s01', 'cly_pc_sav')#, 'cly_pc_uav') # hydroatlas variables
sc_vars <- c() # TODO look up variables. May need to select datasets first
usgs_vars <- c('TOT_TWI','TOT_PRSNOW')#,'TOT_POPDENS90','TOT_EWT','TOT_RECHG')
Retr_Params <- list(paths = list(dir_hydfab=dir_hydfab,
dir_db_attrs=dir_db_attrs,
s3_path_hydatl = s3_path_hydatl),
vars = list(usgs_vars = usgs_vars,
ha_vars = ha_vars),
dataset = 'xssa-mini')
# ---------------------------------------------------------------------------- #
#                              UNIT TESTING
# ---------------------------------------------------------------------------- #
testthat::test_that("proc_attr_std_hfsub_name standardized name generator", {
testthat::expect_equal('hydrofab_testit_111.parquet',
proc.attr.hydfab:::proc_attr_std_hfsub_name(111,"testit",'parquet'))
})
testthat::test_that('proc_attr_gageids',{
# test just usgs vars
Retr_Params_usgs <- Retr_Params_ha <- Retr_Params
Retr_Params_usgs$vars <- list(usgs_vars = usgs_vars)
ls_comids <- proc.attr.hydfab::proc_attr_gageids(gage_ids=ls_fsds_std$gage_ids[2],
featureSource=ls_fsds_std$featureSource,
featureID=ls_fsds_std$featureID,
Retr_Params=Retr_Params_usgs,
lyrs="network",overwrite=FALSE)
testthat::expect_identical(names(ls_comids),ls_fsds_std$gage_ids[2])
testthat::expect_identical(class(ls_comids),"list")
# test just hydroatlas var
Retr_Params_ha$vars <- list(ha_vars = ha_vars)
ls_comids_ha <- proc.attr.hydfab::proc_attr_gageids(gage_ids=ls_fsds_std$gage_ids[2],
featureSource=ls_fsds_std$featureSource,
featureID=ls_fsds_std$featureID,
Retr_Params=Retr_Params_ha,
lyrs="network",overwrite=FALSE)
})
testthat::test_that('retrieve_attr_exst', {
comids <- c("1520007","1623207","1638559","1722317") # !!Don't change this!!
vars <- Retr_Params$vars %>% unlist() %>% unname()
# Run tests based on expected dims
dat_attr_all <- proc.attr.hydfab::retrieve_attr_exst(comids,vars,dir_db_attrs_pkg)
testthat::expect_equal(length(unique(dat_attr_all$COMID)),
length(comids))
testthat::expect_equal(length(unique(dat_attr_all$attribute)),length(vars))
testthat::expect_error(proc.attr.hydfab::retrieve_attr_exst(comids,
vars,
dir_db_attrs='a'))
# Testing for No parquet files present
capt_no_parquet <- testthat::capture_condition(proc.attr.hydfab::retrieve_attr_exst(comids,
vars,
dir_db_attrs=dirname(dir_db_attrs_pkg)))
testthat::expect_true(grepl("parquet",capt_no_parquet$message))
nada_var <- testthat::capture_warning(proc.attr.hydfab::retrieve_attr_exst(comids,vars=c("TOT_TWI","naDa"),
dir_db_attrs_pkg))
testthat::expect_true(grepl("naDa",nada_var$message))
nada_comid <- testthat::capture_condition(proc.attr.hydfab::retrieve_attr_exst(comids=c("1520007","1623207","nada"),vars,
dir_db_attrs_pkg))
testthat::expect_true(base::grepl("nada",nada_comid$message))
testthat::expect_error(proc.attr.hydfab::retrieve_attr_exst(comids,vars=c(3134,3135),
dir_db_attrs_pkg))
testthat::expect_warning(proc.attr.hydfab::retrieve_attr_exst(comids=c(3134,3135),vars,
dir_db_attrs_pkg))
})
Retr_Params_all <- Retr_Params
# Substitute w/ new tempdir based on setup.R
Retr_Params$paths$dir_db_attrs <- Retr_Params$paths$dir_db_attrs %>%
base::gsub(pattern=temp_dir,
replacement=local_temp_dir2() )
Retr_Params$paths$dir_hydfab <- Retr_Params$paths$dir_hydfab %>%
base::gsub(pattern=temp_dir,
replacement =local_temp_dir2() )
Retr_Params_all$vars$ha_vars <- c("pet_mm_s01","cly_pc_sav")
Retr_Params_all$vars$usgs_vars <-  c("TOT_TWI","TOT_PRSNOW","TOT_POPDENS90","TOT_EWT","TOT_RECHG","TOT_BFI")
exp_dat <- readRDS(system.file("extdata", paste0("attrs_18094081.Rds"), package="proc.attr.hydfab"))
exp_dat$attribute <- as.character(exp_dat$attribute)
dat_all <- proc.attr.hydfab::proc_attr_wrap(comid=18094081,Retr_Params_all,
lyrs='network',
overwrite=TRUE )
# How the exp_dat was originally created for unit testing
# saveRDS(dat_all,paste0("~/git/fsds/pkg/proc.attr.hydfab/inst/extdata/attrs_18094081.Rds"))
testthat::expect_true(dir.exists(dir_db_attrs))
# Remove the dl_timestamp column for download timestamp and compare
testthat::expect_equal(
exp_dat %>% select(-dl_timestamp) %>% as.matrix(),
dat_all %>% select(-dl_timestamp) %>% as.matrix())
dat_all %>% select(-dl_timestamp) %>% as.matrix()
exp_dat %>% select(-dl_timestamp) %>% as.matrix()
Retr_Params_all
list.files(Retr_Params$paths$dir_db_attrs)
# files_attrs <- file.path(Retr_Params$paths$dir_db_attrs,
#                          list.files(Retr_Params$paths$dir_db_attrs))
file.remove(file.path(Retr_Params$paths$dir_db_attrs,"comid_18094081_attrs.parquet"))
# files_attrs <- file.path(Retr_Params$paths$dir_db_attrs,
#                          list.files(Retr_Params$paths$dir_db_attrs))
file.remove(file.path(Retr_Params$paths$dir_db_attrs,"comid_18094081_attrs.parquet"))
source("~/git/fsds/pkg/proc.attr.hydfab/flow/flow.install.proc.attr.hydfab.R", echo=TRUE)
featureSource
featureID
ls_fsds_std
ls_comids <- proc.attr.hydfab::grab_attrs_datasets_fsds_wrap(gage_ids = gage_ids,
featureSource = ls_fsds_std$featureSource,
featureID=ls_fsds_std$featureID)
ls_comids <- proc.attr.hydfab::grab_attrs_datasets_fsds_wrap(gage_ids = ls_fsds_std$gage_ids,
featureSource = ls_fsds_std$featureSource,
featureID=ls_fsds_std$featureID)
testthat::expect_equal(names(ls_comids,gage_ids))
ls_comids_all <- proc.attr.hydfab::grab_attrs_datasets_fsds_wrap(Retr_Params
lyrs="network",
ls_comids_all <- proc.attr.hydfab::grab_attrs_datasets_fsds_wrap(Retr_Params,
lyrs="network",
overwrite=FALSE)
Retr_Params
Retr_Params
Retr_Params <- list(paths = list(dir_hydfab=dir_hydfab,
dir_db_attrs=dir_db_attrs,
s3_path_hydatl = s3_path_hydatl,
dir_std_base = dir_user),
vars = list(usgs_vars = usgs_vars,
ha_vars = ha_vars),
dataset = 'xssa-mini')
ls_comids_all <- proc.attr.hydfab::grab_attrs_datasets_fsds_wrap(Retr_Params,
lyrs="network",
overwrite=FALSE)
Retr_Params
ls_comids_all <- proc.attr.hydfab::grab_attrs_datasets_fsds_wrap(Retr_Params,
lyrs="network",
overwrite=FALSE)
Retr_Params <- list(paths = list(dir_hydfab=dir_hydfab,
dir_db_attrs=dir_db_attrs,
s3_path_hydatl = s3_path_hydatl,
dir_std_base = dir_user),
vars = list(usgs_vars = usgs_vars,
ha_vars = ha_vars),
datasets = 'xssa-mini')
ls_comids_all <- proc.attr.hydfab::grab_attrs_datasets_fsds_wrap(Retr_Params,
lyrs="network",
overwrite=FALSE)
testthat::expect_equal(names(ls_comids_all),gage_ids)
names(ls_comids_all)
ls_comids_all
testthat::expect_equal(names(ls_comids_all %>% unname()))
names(ls_comids_all)
testthat::expect_equal(names(ls_comids_all), Retr_Params$datasets))
testthat::expect_equal(names(ls_comids_all), Retr_Params$datasets)
Retr_Params
names(ls_comids_all[[Retr_Params$datasets]])
list.files(Retr_Params$paths$dir_std_base)
list.files(Retr_Params$paths$dir_std_base,'xssa-mini')
list.files(file.path(Retr_Params$paths$dir_std_base,'xssa-mini'))
View(ls_fsds_std)
testthat::expect_error(Retr_Params_bad_ds, lyrs="network",
overwrite=FALSE)
# Test that all datasets are processed
Retr_Params_all
Retr_Params_all_ds
Retr_Params
list.dirs(Retr_Params_all_ds$dir_std_base)
# Test that all datasets are processed
Retr_Params_all_ds <- Retr_Params
Retr_Params_all_ds$datasets <- "all"
list.dirs(Retr_Params_all_ds$dir_std_base)
Retr_Params_all_ds$dir_std_base
Retr_Params
list.dirs(Retr_Params_all_ds$paths$dir_std_base)
list.files(Retr_Params_all_ds$paths$dir_std_base)
testthat::expect_equal(length(ls_comids_all_ds),
length(list.files(Retr_Params_all_ds$paths$dir_std_base)))
Retr_Params_all_ds <- Retr_Params
Retr_Params_all_ds$datasets <- "all"
ls_comids_all_ds <- proc.attr.hydfab::grab_attrs_datasets_fsds_wrap(Retr_Params_all_ds,
lyrs="network",
overwrite=FALSE)
testthat::expect_equal(length(ls_comids_all_ds),
length(list.files(Retr_Params_all_ds$paths$dir_std_base)))
length(ls_comids_all_ds)
source("~/git/fsds/pkg/proc.attr.hydfab/flow/flow.install.proc.attr.hydfab.R", echo=TRUE)
# Test wrong datasets name provided
Retr_Params_bad_ds <- Retr_Params
Retr_Params_bad_ds$datasets <- c("bad","xssa-mini")
testthat::expect_error(Retr_Params_bad_ds, lyrs="network",
overwrite=FALSE)
# Test that all datasets are processed
Retr_Params_all_ds <- Retr_Params
testthat::expect_error(
proc.attr.hydfab::grab_attrs_datasets_fsds_wrap(Retr_Params_bad_ds,
lyrs="network",
overwrite=FALSE))
source("~/git/fsds/pkg/proc.attr.hydfab/flow/flow.install.proc.attr.hydfab.R", echo=TRUE)
ls_fsds_std$featureSource
# test a wrong featureSource
testthat::expect_error(proc.attr.hydfab::proc_attr_gageids(gage_ids=ls_fsds_std$gage_ids[2],
featureSource='notasource',
featureID=ls_fsds_std$featureID,
Retr_Params=Retr_Params_ha,
lyrs="network",overwrite=FALSE))
testthat::expect_warning(  testthat::expect_error(proc.attr.hydfab::proc_attr_gageids(gage_ids=c(ls_fsds_std$gage_ids[2],NA),
featureSource='notasource',
featureID=ls_fsds_std$featureID,
Retr_Params=Retr_Params_ha,
lyrs="network",overwrite=FALSE)))
testthat::expect_warning(proc.attr.hydfab::proc_attr_gageids(gage_ids=c(ls_fsds_std$gage_ids[2],NA),
featureSource='notasource',
featureID=ls_fsds_std$featureID,
Retr_Params=Retr_Params_ha,
lyrs="network",overwrite=FALSE))
# test a wrong featureSource
testthat::expect_error(proc.attr.hydfab::proc_attr_gageids(gage_ids=ls_fsds_std$gage_ids[2],
featureSource='notasource',
featureID=ls_fsds_std$featureID,
Retr_Params=Retr_Params,
lyrs="network",overwrite=FALSE))
testthat::expect_warning(proc.attr.hydfab::proc_attr_gageids(gage_ids=c(ls_fsds_std$gage_ids[2],NA),
featureSource='notasource',
featureID=ls_fsds_std$featureID,
Retr_Params=Retr_Params,
lyrs="network",overwrite=FALSE))
testthat::expect_error(proc.attr.hydfab::proc_attr_gageids(gage_ids=c(ls_fsds_std$gage_ids[2],NA),
featureSource='notasource',
featureID=ls_fsds_std$featureID,
Retr_Params=Retr_Params,
lyrs="network",overwrite=FALSE))
source("~/git/fsds/pkg/proc.attr.hydfab/flow/flow.install.proc.attr.hydfab.R", echo=TRUE)
